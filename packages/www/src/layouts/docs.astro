---
import BaseLayout from './base.astro'
import Nav from '@components/docs-nav.astro'
import Line from '@components/line.astro'
import Editor from '@components/editor.astro'
import type { MarkdownHeading } from 'astro'
import DocsToc from '@components/docs-toc.astro'
import MobileToc from '@components/docs-mobile-toc.astro'
import type { NavLink } from 'src/types'

interface Props {
  headings: MarkdownHeading[]
}

const headings = Astro.props.headings
const links: NavLink[] = [
  {
    group: 'Getting Started',
    pages: [
      { href: '/docs/quickstart', text: 'Quickstart' },
      { href: '/docs/cron', text: 'Cron' },
    ],
  },
  {
    group: 'Products',
    pages: [
      { href: '/docs/cron', text: 'Cron' },
      { href: '/docs/segfault', text: 'Segfault' },
      { href: '/docs/object-object', text: '[object Object]' },
      { href: '/docs/404', text: '404' },
    ],
  },
  {
    group: 'API',
    pages: [
      { href: '/docs/sdks', text: 'Client SDKs' },
      { href: '/docs/api/reference', text: 'API Reference' },
    ],
  },
]

const current = links
  .flatMap((l) => l.pages)
  .find(
    ({ href }) =>
      Astro.url.pathname === href || Astro.url.pathname === href + '/',
  )

if (current) current.active = true
---

<BaseLayout>
  <main slot="docs" class="relative">
    <div
      class="lg:grid lg:grid-cols-[280px_1fr] xl:grid-cols-[280px_1fr_280px]"
    >
      <aside class="hidden lg:block">
        <div
          class="h-[calc(100dvh-40px)] flex flex-col sticky top-10 overflow-y-auto overflow-x-hidden border-r"
        >
          <Nav {links} />
        </div>
      </aside>
      <div>
        <div class="xl:hidden h-10 w-full sticky top-10 bg-black z-10">
          <div
            class="flex items-center align-middle lowercase h-full px-2 border-b"
          >
            <button
              data-menu-open-button
              class="lg:hidden grid px-unset !p-3 text-gray-10 size-10 hover:text-white"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                class="stroke-2 size-full block align-middle rendering-legibility"
                aria-hidden="true"
                role="presentation"
              >
                <path
                  fill="none"
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M22 6.8H2m20 10.4H2"
                >
                </path>
              </svg>
              <span class="sr-only">Open Menu</span>
            </button>
            <button
              data-menu-close-button
              class="hidden lg:hidden px-unset !p-3 text-gray-10 size-10 hover:text-white"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                class="stroke-2 size-full block align-middle rendering-legibility"
                aria-hidden="true"
                role="presentation"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M18 6 6 18M6 6l12 12"
                >
                </path>
              </svg>
              <span class="sr-only">Close Menu</span>
            </button>
            <MobileToc {headings} />
          </div>
        </div>
        <Editor data-content>
          <slot />
          <Line />
          <Line />
        </Editor>
      </div>
      <aside class="hidden xl:block border-l">
        <div
          class="h-[calc(100dvh-40px)] flex flex-col sticky top-10 overflow-y-auto overflow-x-hidden border-r"
        >
          <Line inactive class="text-white">on this page</Line>
          <DocsToc {headings} />
        </div>
      </aside>
    </div>
    <div
      data-menu
      class="hidden fixed top-20 inset-x-0 size-full bg-black overflow-y-auto"
    >
      <Nav {links} />
    </div>
  </main>
</BaseLayout>

<script>
  const menuOpenButton = document.querySelectorAll('[data-menu-open-button]')[0]
  const menuCloseButton = document.querySelectorAll(
    '[data-menu-close-button]',
  )[0]
  const menu = document.querySelectorAll('[data-menu]')[0]
  const content = document.querySelectorAll('[data-content]')[0]

  const toggleMenu = () => {
    menuOpenButton.classList.toggle('hidden')
    menuCloseButton.classList.toggle('hidden')
    menu.classList.toggle('hidden')
    content.classList.toggle('hidden')
  }

  menuOpenButton.addEventListener('click', toggleMenu)
  menuCloseButton.addEventListener('click', toggleMenu)
</script>
