---
import type { HTMLAttributes } from 'astro/types'
import { parseHTML } from 'linkedom'

interface Props extends HTMLAttributes<'pre'> {}
const { class: _, ...props } = Astro.props

const html = await Astro.slots.render('default')
const { document } = parseHTML(html)
const child = [...document.children].find((c) => c.localName === 'code')
const code = child?.getAttribute('data-code')
---

<figure class="relative">
  <pre {...props} class="bg-gray-1 flex flex-col">
    <slot />
  </pre>
  <div class="absolute top-1 right-5">
    <button
      data-copy-button
      data-code={code}
      class="text-gray-10 hover:text-white"
    >
    </button>
  </div>
</figure>

<script>
  class CodeCopyButton {
    private element: HTMLElement
    private resetDelay = 2000

    private copyIcon = `<svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="size-5"><path d="M1 9.50006C1 10.3285 1.67157 11.0001 2.5 11.0001H4L4 10.0001H2.5C2.22386 10.0001 2 9.7762 2 9.50006L2 2.50006C2 2.22392 2.22386 2.00006 2.5 2.00006L9.5 2.00006C9.77614 2.00006 10 2.22392 10 2.50006V4.00002H5.5C4.67158 4.00002 4 4.67159 4 5.50002V12.5C4 13.3284 4.67158 14 5.5 14H12.5C13.3284 14 14 13.3284 14 12.5V5.50002C14 4.67159 13.3284 4.00002 12.5 4.00002H11V2.50006C11 1.67163 10.3284 1.00006 9.5 1.00006H2.5C1.67157 1.00006 1 1.67163 1 2.50006V9.50006ZM5 5.50002C5 5.22388 5.22386 5.00002 5.5 5.00002H12.5C12.7761 5.00002 13 5.22388 13 5.50002V12.5C13 12.7762 12.7761 13 12.5 13H5.5C5.22386 13 5 12.7762 5 12.5V5.50002Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`
    private checkIcon = `<svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" class="size-5 text-green-11"><path d="M11.4669 3.72684C11.7558 3.91574 11.8369 4.30308 11.648 4.59198L7.39799 11.092C7.29783 11.2452 7.13556 11.3467 6.95402 11.3699C6.77247 11.3931 6.58989 11.3355 6.45446 11.2124L3.70446 8.71241C3.44905 8.48022 3.43023 8.08494 3.66242 7.82953C3.89461 7.57412 4.28989 7.55529 4.5453 7.78749L6.75292 9.79441L10.6018 3.90792C10.7907 3.61902 11.178 3.53795 11.4669 3.72684Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`

    constructor(element: HTMLElement) {
      this.element = element
      this.init()
    }

    private async copyCode(): Promise<void> {
      try {
        const code = this.element.dataset.code?.replace(/\u007f/g, '\n') ?? ''
        await navigator.clipboard.writeText(code)

        // Swap to check icon
        this.element.innerHTML = this.checkIcon

        // Reset back to copy icon after delay
        setTimeout(() => {
          this.element.innerHTML = this.copyIcon
        }, this.resetDelay)
      } catch (error) {
        console.error('Failed to copy code:', error)
      }
    }

    private init(): void {
      // Set initial icon
      this.element.innerHTML = this.copyIcon
      this.element.addEventListener('click', () => this.copyCode())
    }
  }

  // Initialize all copy buttons on the page
  document
    .querySelectorAll<HTMLElement>('[data-copy-button]')
    .forEach((element) => {
      new CodeCopyButton(element)
    })
</script>
