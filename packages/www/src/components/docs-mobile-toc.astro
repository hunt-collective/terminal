---
import type { HTMLAttributes } from 'astro/types'
import Editor from '@components/editor.astro'
import Line from '@components/line.astro'
import type { MarkdownHeading } from 'astro'

interface Props extends HTMLAttributes<'nav'> {
  headings: MarkdownHeading[]
}
const { class: _, headings, ...props } = Astro.props
---

<terminal-mobile-toc>
  <nav
    {...props}
    class:list={{
      'flex flex-col gap-y-0': true,
      [Astro.props.class ?? '']: !!Astro.props.class,
    }}
  >
    <details>
      <summary class="flex gap-1 lg:px-4">
        <div class="toggle flex gap-1 lowercase items-center text-gray-10">
          On this page
          <svg
            viewBox="0 0 15 15"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            class="size-5"
          >
            <path
              d="M6.18194 4.18185C6.35767 4.00611 6.6426 4.00611 6.81833 4.18185L9.81833 7.18185C9.90272 7.26624 9.95013 7.3807 9.95013 7.50005C9.95013 7.6194 9.90272 7.73386 9.81833 7.81825L6.81833 10.8182C6.6426 10.994 6.35767 10.994 6.18194 10.8182C6.0062 10.6425 6.0062 10.3576 6.18194 10.1819L8.86374 7.50005L6.18194 4.81825C6.0062 4.64251 6.0062 4.35759 6.18194 4.18185Z"
              fill="currentColor"
              fill-rule="evenodd"
              clip-rule="evenodd"
            >
            </path>
          </svg>
        </div>
        <span class="display-current lowercase text-gray-11"></span>
      </summary>
      <Editor
        class="lowercase absolute inset-0 top-10 z-50 bg-gray-1 h-fit"
        numberless
      >
        {
          headings.map((heading, i) => (
            <Line
              internalLink
              href={`#${heading.slug}`}
              class="aria-[current]:border-orange aria-[current]:text-gray-11 aria-[current]:bg-gray-6"
            >
              <span
                style={{
                  // display: 'inline-block',
                  paddingLeft: `${Math.max(heading.depth - 2, 0) * 15}px`,
                }}
              >
                {i === 0 ? 'Overview' : heading.text}
              </span>
            </Line>
          ))
        }
      </Editor>
    </details>
  </nav>
</terminal-mobile-toc>

<script>
  import { TerminalTOC } from './terminal-toc'

  class MobileTOC extends TerminalTOC {
    override set current(link: HTMLAnchorElement) {
      super.current = link
      const display = this.querySelector('.display-current') as HTMLSpanElement
      if (display) display.textContent = link.textContent
    }

    constructor() {
      super()
      const details = this.querySelector('details')
      if (!details) return
      const closeToC = () => {
        details.open = false
      }
      // Close the table of contents whenever a link is clicked.
      details.querySelectorAll('a').forEach((a) => {
        a.addEventListener('click', closeToC)
      })
      // Close the table of contents when a user clicks outside of it.
      window.addEventListener('click', (e) => {
        if (!details.contains(e.target as Node)) closeToC()
      })
      // Or when they press the escape key.
      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && details.open) {
          const hasFocus = details.contains(document.activeElement)
          closeToC()
          if (hasFocus) {
            const summary = details.querySelector('summary')
            if (summary) summary.focus()
          }
        }
      })
    }
  }

  customElements.define('terminal-mobile-toc', MobileTOC)
</script>
